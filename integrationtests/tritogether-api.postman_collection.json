{
	"info": {
		"_postman_id": "5b000c35-c5c7-4432-89cc-5df1180454cc",
		"name": "tritogether-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Coach",
			"item": [
				{
					"name": "Create a coach",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f1344db2-3999-43e9-959c-36719055d03f",
								"exec": [
									"pm.test(\"Create coach id variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"coachId\", jsonData.id);",
									"});",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Integration Test Coach\",\r\n\t\"email\": \"coach@citest.com\",\r\n\t\"password\": \"_TriTogether20_\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/coaches",
							"host": [
								"{{url}}"
							],
							"path": [
								"coaches"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a coach 400 email exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa205052-d3c5-44ce-bb85-3ea1c453b30a",
								"exec": [
									"pm.test(\"Error email exists\", function () {",
									"    pm.response.to.have.body(\"The specified e-mail address already exists\");",
									"});",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Integration Test Coach\",\r\n\t\"email\": \"coach@citest.com\",\r\n\t\"password\": \"_TriTogether20_\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/coaches",
							"host": [
								"{{url}}"
							],
							"path": [
								"coaches"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a coach with wrong email 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e071ef56-3d8d-4ef4-930c-10c6c9896220",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Email is not valid\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"email must be an email\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Integration Test Coach\",\r\n\t\"email\": \"coach@citest\",\r\n\t\"password\": \"_TriTogether20_\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/coaches",
							"host": [
								"{{url}}"
							],
							"path": [
								"coaches"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a coach with missing name 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "902b644f-c493-4619-8923-abb52c22ce38",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Name is missing\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"name must be longer than or equal to 5 characters\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"coach@citest.com\",\r\n\t\"password\": \"_TriTogether20_\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/coaches",
							"host": [
								"{{url}}"
							],
							"path": [
								"coaches"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a coach with invalid password 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c3db1e97-4243-45d6-9221-df1e3370855c",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Password is not valid\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The specified password must be at least 8 characters long\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Integration Test Coach\",\r\n\t\"email\": \"coach@citest.com\",\r\n\t\"password\": \"_Tri_\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/coaches",
							"host": [
								"{{url}}"
							],
							"path": [
								"coaches"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtain Coach JWT token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0eb20ed7-2c30-4f82-abd6-ba768c02df3b",
								"exec": [
									"pm.test(\"Create user id variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"jwtToken\", \"Bearer \"+jsonData.access_token);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"coach@citest.com\",\r\n\t\"password\": \"_TriTogether20_\",\r\n\t\"isCoach\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/signin",
							"host": [
								"{{url}}"
							],
							"path": [
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a coach",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3a538627-9eb1-471f-bd56-010d930eb005",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Integration Test Coach\",\r\n\t\"email\": \"coach@citest.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/coaches/{{coachId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"coaches",
								"{{coachId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a coach with missing email 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0827e4dd-8583-4771-9dd8-ab6bcbf70a3d",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Email is missing\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"email must be longer than or equal to 10 characters\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Integration Test Coach\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/coaches/{{coachId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"coaches",
								"{{coachId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a different coach 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e15a9b5-f62a-4149-bcac-0abc339a28fd",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"Coach can only be updated by its own user\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"A coach can only be updated by its own user\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{secondaryJwtTokenCoach}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Integration Test Coach\",\r\n\t\"email\": \"coach@citest.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/coaches/{{coachId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"coaches",
								"{{coachId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update unexisting coach 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "93275108-7558-41bb-95c1-cfa07b0863a9",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"The coach you are trying to update doesn't exist in the db\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The coach you are trying to update doesn't exist in the db\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{secondaryJwtTokenCoach}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Integration Test Coach\",\r\n\t\"email\": \"coach@citest.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/coaches/0",
							"host": [
								"{{url}}"
							],
							"path": [
								"coaches",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get coach",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec351eb5-90e6-4233-924e-1985baa9abc0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Coach is created and can be fetched successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.email).to.eql(\"coach@citest.com\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/coaches/{{coachId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"coaches",
								"{{coachId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get unexisting coach 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b1604bec-9158-44e6-b14c-e796112602f5",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Coach is not in the DB\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The coach you are trying to retrieve doesn't exist in the db\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/coaches/0",
							"host": [
								"{{url}}"
							],
							"path": [
								"coaches",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get coaches",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4a67e241-f5d8-437f-8db4-47eec887f237",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/coaches",
							"host": [
								"{{url}}"
							],
							"path": [
								"coaches"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get coach athletes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e991f4f3-55b9-43a7-82d4-92f4b0bebfff",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/coaches/{{coachId}}/athletes",
							"host": [
								"{{url}}"
							],
							"path": [
								"coaches",
								"{{coachId}}",
								"athletes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get forbidden coach athletes 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "21a45c8a-8c54-42f3-85b0-dabc1e00b2bf",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"A coach collection of athletes can only be retrieved by the coach itself\", function () {",
									"    pm.response.to.have.body(\"A coach collection of athletes can only be retrieved by the coach itself\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{secondaryJwtTokenCoach}}"
							}
						],
						"url": {
							"raw": "{{url}}/coaches/{{coachId}}/athletes",
							"host": [
								"{{url}}"
							],
							"path": [
								"coaches",
								"{{coachId}}",
								"athletes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get unexisting coach athletes 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2edcc7a6-ab83-412a-bf5a-b6d66309e4e6",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"The coach you are trying to retrieve athletes from doesn't exist in the db\", function () {",
									"    pm.response.to.have.body(\"The coach you are trying to retrieve athletes from doesn't exist in the db\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{secondaryJwtTokenCoach}}"
							}
						],
						"url": {
							"raw": "{{url}}/coaches/0/athletes",
							"host": [
								"{{url}}"
							],
							"path": [
								"coaches",
								"0",
								"athletes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete coach forbidden 401",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2c368b7a-126e-48ec-8d6c-8f1a71168c4f",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"A coach can only be deleted by its own user\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"A coach can only be deleted by its own user\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{secondaryJwtTokenCoach}}"
							}
						],
						"url": {
							"raw": "{{url}}/coaches/{{coachId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"coaches",
								"{{coachId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete unexisting coach 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d07afbfa-d4f3-4eed-87a3-e697edc00625",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"The coach you are trying to delete doesn't exist in the db\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The coach you are trying to delete doesn't exist in the db\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{jwtToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/coaches/0",
							"host": [
								"{{url}}"
							],
							"path": [
								"coaches",
								"0"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Athlete",
			"item": [
				{
					"name": "Create an athlete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0577dd9-955b-41e1-aa52-7e059419b296",
								"exec": [
									"pm.test(\"Create athlete id variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"athleteId\", jsonData.id);",
									"});",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Default availability gets created\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.availability.monday).to.eql(true);",
									"});",
									"pm.test(\"Create availability id variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"availabilityId\", jsonData.availability.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Integration Test Athlete\",\r\n\t\"email\": \"athlete@citest.com\",\r\n\t\"password\": \"_TriTogether20_\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create an athlete 400 email exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ea267ce-06b3-4bd4-9b5e-e73cab2d5541",
								"exec": [
									"pm.test(\"Error email exists\", function () {",
									"    pm.response.to.have.body(\"The specified e-mail address already exists\");",
									"});",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Integration Test Athlete\",\r\n\t\"email\": \"athlete@citest.com\",\r\n\t\"password\": \"_TriTogether20_\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create an athlete with wrong email 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "788808b0-2ac9-46fb-8f15-e8331f233ce0",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Email is not valid\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"email must be an email\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Integration Test Athlete\",\r\n\t\"email\": \"athlete@citest\",\r\n\t\"password\": \"_TriTogether20_\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create an athlete with missing name 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "558b1a69-f57a-48ab-8fd3-77f445a04d79",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Name is missing\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"name must be longer than or equal to 5 characters\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"athlete@citest.com\",\r\n\t\"password\": \"_TriTogether20_\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a coach with invalid password 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ac0ed83c-c1e0-40ad-ab9b-3c545da5b26c",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Password is not valid\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The specified password must be at least 8 characters long\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Integration Test Athlete\",\r\n\t\"email\": \"athlete@citest.com\",\r\n\t\"password\": \"_Tri_\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtain Athlete JWT token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4a72c193-9e61-4468-966d-65f6aef9dc6b",
								"exec": [
									"pm.test(\"Create user id variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"jwtToken\", \"Bearer \"+jsonData.access_token);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"athlete@citest.com\",\r\n\t\"password\": \"_TriTogether20_\",\r\n\t\"isCoach\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/signin",
							"host": [
								"{{url}}"
							],
							"path": [
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an athlete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e9c66a9-7a08-4df1-b737-648a2236ed5d",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Integration Test Athlete\",\r\n\t\"email\": \"athlete@citest.com\",\r\n\t\"availability\": {\r\n\t\t\"id\": {{availabilityId}},\r\n        \"monday\": true,\r\n        \"tuesday\": true,\r\n        \"wednesday\": false,\r\n        \"thursday\": false,\r\n        \"friday\": true,\r\n        \"saturday\": true,\r\n        \"sunday\": true\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an athlete with missing email 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0ffae17a-4976-400c-b54f-a0b938cc4fb4",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Email is missing\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"email must be longer than or equal to 10 characters\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Integration Test Athlete\",\r\n\t\"availability\": {\r\n\t\t\"id\": {{availabilityId}},\r\n        \"monday\": true,\r\n        \"tuesday\": true,\r\n        \"wednesday\": false,\r\n        \"thursday\": false,\r\n        \"friday\": true,\r\n        \"saturday\": true,\r\n        \"sunday\": true\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a different athlete 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9c63f7a0-4720-4dbc-b169-3b63ca9e2ac5",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"An athlete can only be updated by its own user\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"An athlete can only be updated by its own user\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{secondaryJwtTokenAthlete}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Integration Test Athlete\",\r\n\t\"email\": \"athlete@citest.com\",\r\n\t\"availability\": {\r\n\t\t\"id\": {{availabilityId}},\r\n        \"monday\": true,\r\n        \"tuesday\": true,\r\n        \"wednesday\": false,\r\n        \"thursday\": false,\r\n        \"friday\": true,\r\n        \"saturday\": true,\r\n        \"sunday\": true\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update unexisting athlete 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "110f208e-709a-4873-a801-a32c61051fce",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"The athlete you are trying to update doesn't exist in the db\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The athlete you are trying to update doesn't exist in the db\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{secondaryJwtTokenAthlete}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Integration Test Athlete\",\r\n\t\"email\": \"athlete@citest.com\",\r\n\t\"availability\": {\r\n\t\t\"id\": {{availabilityId}},\r\n        \"monday\": true,\r\n        \"tuesday\": true,\r\n        \"wednesday\": false,\r\n        \"thursday\": false,\r\n        \"friday\": true,\r\n        \"saturday\": true,\r\n        \"sunday\": true\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/0",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get athlete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a16f7472-21ae-4d1a-863f-399f4a19137a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Athlete is created and can be fetched successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.email).to.eql(\"athlete@citest.com\");",
									"});",
									"",
									"pm.test(\"Availability gets fetched too\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.availability.wednesday).to.eql(false);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get unexisting athlete 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a2148246-686e-4c2d-9155-4c1b4ccbe363",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Athlete is not in the DB\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The athlete you are trying to retrieve doesn't exist in the db\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes/0",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get forbidden athlete 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d1b14b15-a8e3-4320-b350-f936dea2f587",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Athlete has to be retrieved by itself or coach\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Athlete information can only be retrieved by the owner athlete or its current coach\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{secondaryJwtTokenAthlete}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get athletes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3b90027f-3415-45f8-b25d-f9ec4e355c6b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update coach of an unexisting athlete 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0c06ccb1-3179-4ba9-9da3-131cf1956037",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"The athlete/coach you are trying to update doesn't exist in the db\", function () {",
									"    pm.response.to.have.body(\"The athlete/coach you are trying to update doesn't exist in the db\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"id\": {{coachId}},\r\n    \"name\": \"Integration Test Coach\",\r\n\t\"email\": \"coach@citest.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/0/coach",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"0",
								"coach"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update unexisting coach of an athlete 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8cf811e-3f62-417f-8ab2-72b98c08fb50",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"The athlete/coach you are trying to update doesn't exist in the db\", function () {",
									"    pm.response.to.have.body(\"The athlete/coach you are trying to update doesn't exist in the db\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Integration Test Coach\",\r\n\t\"email\": \"coach@citest.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/coach",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"coach"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtain Coach JWT token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09cd20ce-aa06-4e07-967c-348da086c203",
								"exec": [
									"pm.test(\"Create user id variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"jwtToken\", \"Bearer \"+jsonData.access_token);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"coach@citest.com\",\r\n\t\"password\": \"_TriTogether20_\",\r\n\t\"isCoach\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/signin",
							"host": [
								"{{url}}"
							],
							"path": [
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update coach of an athlete must be coach 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f882fc6b-6f6d-48c1-adb4-0500164865fb",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"Athlete's coach must be the one performing the request\", function () {",
									"    pm.response.to.have.body(\"Athlete's coach must be the one performing the request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{secondaryJwtTokenCoach}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"id\": {{coachId}},\r\n    \"name\": \"Integration Test Coach\",\r\n\t\"email\": \"coach@citest.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/coach",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"coach"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update coach of an athlete must exist PENDING notification 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7ad25863-aa69-45cb-8cd0-825b1ad467f8",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"There is no PENDING coaching notification between specified athlete and coach\", function () {",
									"    pm.response.to.have.body(\"There is no PENDING coaching notification between specified athlete and coach\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"id\": {{coachId}},\r\n    \"name\": \"Integration Test Coach\",\r\n\t\"email\": \"coach@citest.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/coach",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"coach"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtain Athlete JWT token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "554ccdc5-bd25-4b8a-9f1a-c5489d2dd2ab",
								"exec": [
									"pm.test(\"Create user id variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"jwtToken\", \"Bearer \"+jsonData.access_token);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"athlete@citest.com\",\r\n\t\"password\": \"_TriTogether20_\",\r\n\t\"isCoach\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/signin",
							"host": [
								"{{url}}"
							],
							"path": [
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create pending notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "27811888-bcee-4843-a5f6-e2d68f0fa310",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"New notification status is PENDING\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"PENDING\");",
									"});",
									"",
									"pm.test(\"Create notification id variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"notificationId\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"athlete\": {\r\n\t\t\"id\": {{athleteId}},\r\n    \t\"name\": \"Integration Test Athlete\",\r\n\t\t\"email\": \"athlete@citest.com\"\t\r\n\t},\r\n\t\"coach\": {\r\n\t\t\"id\": {{coachId}},\r\n    \t\"name\": \"Integration Test Coach\",\r\n\t\t\"email\": \"coach@citest.com\"\r\n\t}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/notifications",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtain Coach JWT token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "16693787-de50-4e67-8bf6-71dc316396e3",
								"exec": [
									"pm.test(\"Create user id variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"jwtToken\", \"Bearer \"+jsonData.access_token);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"coach@citest.com\",\r\n\t\"password\": \"_TriTogether20_\",\r\n\t\"isCoach\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/signin",
							"host": [
								"{{url}}"
							],
							"path": [
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update coach of an athlete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "efc5ed51-463f-48a5-a01d-2011d27e5fbd",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Athlete should be updated with a coach\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"athleteId\"));",
									"    pm.expect(jsonData.coach).to.not.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"id\": {{coachId}},\r\n    \"name\": \"Integration Test Coach\",\r\n\t\"email\": \"coach@citest.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/coach",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"coach"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update coach of an athlete, there is a coach already 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8cc57734-1182-4fff-8680-1d7f886a1404",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"There is a coach assigned to the athlete already\", function () {",
									"    pm.response.to.have.body(\"There is a coach assigned to the athlete already\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"id\": {{coachId}},\r\n    \"name\": \"Integration Test Coach\",\r\n\t\"email\": \"coach@citest.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/coach",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"coach"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update forbidden coach of an athlete 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "596ce0a5-c50d-4437-982b-c5ef2046f8d2",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"Athlete's coach must be the one performing the request\", function () {",
									"    pm.response.to.have.body(\"Athlete's coach must be the one performing the request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{secondaryJwtTokenCoach}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"id\": {{coachId}},\r\n    \"name\": \"Integration Test Coach\",\r\n\t\"email\": \"coach@citest.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/coach",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"coach"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get athlete from coach",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5a4c42f5-42cd-4f9b-8aeb-1c39f4af1d98",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Athlete can be fetched successfully from coach too\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.email).to.eql(\"athlete@citest.com\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtain Coach JWT token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b36887f-fab2-4b01-b541-2c1b31f01d92",
								"exec": [
									"pm.test(\"Create user id variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"jwtToken\", \"Bearer \"+jsonData.access_token);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"coach@citest.com\",\r\n\t\"password\": \"_TriTogether20_\",\r\n\t\"isCoach\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/signin",
							"host": [
								"{{url}}"
							],
							"path": [
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove coach of an athlete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8eae5db5-9fd6-4d60-9051-d8d67a459a4e",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Coach should be successfully removed\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.coach).to.eql(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Integration Test Coach\",\r\n\t\"email\": \"coach@citest.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/coach",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"coach"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update coach of an athlete again",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0053b22e-c865-4761-bf46-2cd5c1f7d7e4",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Athlete should be updated with a coach\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"athleteId\"));",
									"    pm.expect(jsonData.coach).to.not.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"id\": {{coachId}},\r\n    \"name\": \"Integration Test Coach\",\r\n\t\"email\": \"coach@citest.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/coach",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"coach"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtain Athlete JWT token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "842dcf17-f37e-47a6-af7e-6ec3eb936a2f",
								"exec": [
									"pm.test(\"Create user id variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"jwtToken\", \"Bearer \"+jsonData.access_token);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"athlete@citest.com\",\r\n\t\"password\": \"_TriTogether20_\",\r\n\t\"isCoach\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/signin",
							"host": [
								"{{url}}"
							],
							"path": [
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete athlete forbidden 401",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "14fe69fc-83b6-4a23-86ae-99b807923908",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"An athlete can only be deleted by its own user\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"An athlete can only be deleted by its own user\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{secondaryJwtTokenAthlete}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete unexisting athlete 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6e7b2f76-fe32-4c20-ba1e-28fcf1e2b254",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"The athlete you are trying to delete doesn't exist in the db\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The athlete you are trying to delete doesn't exist in the db\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes/0",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"0"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Notification",
			"item": [
				{
					"name": "Get unexisting athlete notifications 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "543c0d20-2228-466f-a016-061d08b6d364",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"The athlete you are trying to retrieve notifications from doesn't exist in the db\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The athlete you are trying to retrieve notifications from doesn't exist in the db\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes/0/notifications",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"0",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get forbidden athlete notifications 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a01dc99f-3dec-476c-bb6f-ce8b5b8106c0",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"Notifications can only be retrieved by the owner athlete\", function () {",
									"    pm.response.to.have.body(\"Notifications can only be retrieved by the owner athlete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{secondaryJwtTokenAthlete}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/notifications",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get athlete notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2c1526c8-ac17-4456-b3e2-b98c678a8b37",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"There is a PENDING notification\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].status).to.eql(\"PENDING\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/notifications",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtain Coach JWT token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3f82da15-bf8a-458d-a8b5-8a3cbd80f7bb",
								"exec": [
									"pm.test(\"Create user id variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"jwtToken\", \"Bearer \"+jsonData.access_token);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"coach@citest.com\",\r\n\t\"password\": \"_TriTogether20_\",\r\n\t\"isCoach\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/signin",
							"host": [
								"{{url}}"
							],
							"path": [
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get unexisting coach notifications 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c4973317-229a-4eb3-ac98-d8d82fbfb713",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"The coach you are trying to retrieve notifications from doesn't exist in the db\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The coach you are trying to retrieve notifications from doesn't exist in the db\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/coaches/0/notifications",
							"host": [
								"{{url}}"
							],
							"path": [
								"coaches",
								"0",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get forbidden coach notifications 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "59919170-77fd-4ff6-885c-9ec9eec22d1a",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"Notifications can only be retrieved by the owner coach\", function () {",
									"    pm.response.to.have.body(\"Notifications can only be retrieved by the owner coach\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{secondaryJwtTokenCoach}}"
							}
						],
						"url": {
							"raw": "{{url}}/coaches/{{coachId}}/notifications",
							"host": [
								"{{url}}"
							],
							"path": [
								"coaches",
								"{{coachId}}",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get coach notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9b5068f8-e073-4a4e-896b-48b4dcf742eb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].status).to.eql(\"PENDING\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/coaches/{{coachId}}/notifications",
							"host": [
								"{{url}}"
							],
							"path": [
								"coaches",
								"{{coachId}}",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create pending notification forbidden athlete 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "49ca1635-232b-4409-b1dc-05e71e747ab9",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"A notification can only be created by the specified athlete\", function () {",
									"    pm.response.to.have.body(\"A notification can only be created by the specified athlete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"athlete\": {\r\n\t\t\"id\": {{athleteId}},\r\n    \t\"name\": \"Integration Test Athlete\",\r\n\t\t\"email\": \"athlete@citest.com\"\t\r\n\t},\r\n\t\"coach\": {\r\n\t\t\"id\": {{coachId}},\r\n    \t\"name\": \"Integration Test Coach\",\r\n\t\t\"email\": \"coach@citest.com\"\r\n\t}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/notifications",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtain Athlete JWT token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "63397361-7c26-4d88-bc7e-de4d38567ace",
								"exec": [
									"pm.test(\"Create user id variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"jwtToken\", \"Bearer \"+jsonData.access_token);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"athlete@citest.com\",\r\n\t\"password\": \"_TriTogether20_\",\r\n\t\"isCoach\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/signin",
							"host": [
								"{{url}}"
							],
							"path": [
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create pending notification unexisting athlete 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d47edd8-5ff6-44e3-9bab-0788641a9003",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"The athlete/coach you are trying to create notifications for doesn't exist in the db\", function () {",
									"    pm.response.to.have.body(\"The athlete/coach you are trying to create notifications for doesn't exist in the db\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"athlete\": {\r\n\t\t\"id\": {{athleteId}},\r\n    \t\"name\": \"Integration Test Athlete\",\r\n\t\t\"email\": \"athlete@citest.com\"\t\r\n\t},\r\n\t\"coach\": {\r\n\t\t\"id\": {{coachId}},\r\n    \t\"name\": \"Integration Test Coach\",\r\n\t\t\"email\": \"coach@citest.com\"\r\n\t}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/0/notifications",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"0",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create pending notification unexisting coach 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "937536f3-a0aa-4e0c-a963-f44a1c9ff881",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"The athlete/coach you are trying to create notifications for doesn't exist in the db\", function () {",
									"    pm.response.to.have.body(\"The athlete/coach you are trying to create notifications for doesn't exist in the db\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"athlete\": {\r\n\t\t\"id\": {{athleteId}},\r\n    \t\"name\": \"Integration Test Athlete\",\r\n\t\t\"email\": \"athlete@citest.com\"\t\r\n\t},\r\n\t\"coach\": {\r\n\t\t\"id\": 0,\r\n    \t\"name\": \"Integration Test Coach\",\r\n\t\t\"email\": \"coach@citest.com\"\r\n\t}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/notifications",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update unexisting notification 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "13aa5ca8-7ad6-4f96-92fc-7d0b3804b890",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"The notification you are trying to update doesn't exist in the db\", function () {",
									"    pm.response.to.have.body(\"The notification you are trying to update doesn't exist in the db\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"status\": \"APPROVED\",\r\n\t\"athlete\": {\r\n\t\t\"id\": {{athleteId}},\r\n    \t\"name\": \"Integration Test Athlete\",\r\n\t\t\"email\": \"athlete@citest.com\"\t\r\n\t},\r\n\t\"coach\": {\r\n\t\t\"id\": {{coachId}},\r\n    \t\"name\": \"Integration Test Coach\",\r\n\t\t\"email\": \"coach@citest.com\"\r\n\t}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/notifications/0",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"notifications",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update notification bad status 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1cde75de-9587-492e-bbf9-492291d5cdf7",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Name is missing\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"status should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"status\": \"NOT-POSSIBLE-STATUS\",\r\n\t\"athlete\": {\r\n\t\t\"id\": {{athleteId}},\r\n    \t\"name\": \"Integration Test Athlete\",\r\n\t\t\"email\": \"athlete@citest.com\"\t\r\n\t},\r\n\t\"coach\": {\r\n\t\t\"id\": {{coachId}},\r\n    \t\"name\": \"Integration Test Coach\",\r\n\t\t\"email\": \"coach@citest.com\"\r\n\t}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/notifications/{{notificationId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"notifications",
								"{{notificationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update notification bad ids 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "52d5a26e-e8e6-4b63-9cc9-630ea18c946f",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"The specified athlete/coach is not the same as the original athlete/coach in the notification\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The specified athlete/coach is not the same as the original athlete/coach in the notification\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"status\": \"APPROVED\",\r\n\t\"athlete\": {\r\n\t\t\"id\": {{athleteId}},\r\n    \t\"name\": \"Integration Test Athlete\",\r\n\t\t\"email\": \"athlete@citest.com\"\t\r\n\t},\r\n\t\"coach\": {\r\n\t\t\"id\": 0,\r\n    \t\"name\": \"Integration Test Coach\",\r\n\t\t\"email\": \"coach@citest.com\"\r\n\t}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/notifications/{{notificationId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"notifications",
								"{{notificationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update forbidden pending notification 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0fb1dff6-dbf5-4ccd-ba96-cea57646dfe8",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"A notification can only be updated by the owner athlete or the coach implied\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"A notification can only be updated by the owner athlete or the coach implied\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{secondaryJwtTokenAthlete}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"status\": \"APPROVED\",\r\n\t\"athlete\": {\r\n\t\t\"id\": {{athleteId}},\r\n    \t\"name\": \"Integration Test Athlete\",\r\n\t\t\"email\": \"athlete@citest.com\"\t\r\n\t},\r\n\t\"coach\": {\r\n\t\t\"id\": {{coachId}},\r\n    \t\"name\": \"Integration Test Coach\",\r\n\t\t\"email\": \"coach@citest.com\"\r\n\t}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/notifications/{{notificationId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"notifications",
								"{{notificationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update pending notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b8e0a0c7-fa88-4d6a-b5ce-1ba4e7a9cd65",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"New notification status is APPROVED\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"APPROVED\");",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"notificationId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"status\": \"APPROVED\",\r\n\t\"athlete\": {\r\n\t\t\"id\": {{athleteId}},\r\n    \t\"name\": \"Integration Test Athlete\",\r\n\t\t\"email\": \"athlete@citest.com\"\t\r\n\t},\r\n\t\"coach\": {\r\n\t\t\"id\": {{coachId}},\r\n    \t\"name\": \"Integration Test Coach\",\r\n\t\t\"email\": \"coach@citest.com\"\r\n\t}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/notifications/{{notificationId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"notifications",
								"{{notificationId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Activity",
			"item": [
				{
					"name": "Obtain Coach JWT token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5d41216e-9486-4150-8280-0a36a11482bb",
								"exec": [
									"pm.test(\"Create user id variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"jwtToken\", \"Bearer \"+jsonData.access_token);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"coach@citest.com\",\r\n\t\"password\": \"_TriTogether20_\",\r\n\t\"isCoach\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/signin",
							"host": [
								"{{url}}"
							],
							"path": [
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create an activity missing description 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8c094059-8ed7-4afe-8b89-9fd0ee2b0624",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"description must be longer than or equal to 10 characters\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"description must be longer than or equal to 10 characters\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"date\": \"2020-04-10T00:00:00.000Z\",\n    \"discipline\": {\n        \"id\": 1,\n        \"name\": \"swimming\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/activities",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"activities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create an activity unexisting athlete 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4383f320-c199-4de2-bc09-1fcce39c99da",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"The athlete you are trying to create activities for doesn't exist in the db\", function () {",
									"    pm.response.to.have.body(\"The athlete you are trying to create activities for doesn't exist in the db\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"description of activity here\",\n    \"date\": \"2020-04-10T00:00:00.000Z\",\n    \"discipline\": {\n        \"id\": 1,\n        \"name\": \"swimming\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/0/activities",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"0",
								"activities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create an activity forbidden coach 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "52ba8294-1426-4a21-947c-cd7bc67bb3f8",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"An activity can only be created by the coach of the specified athlete\", function () {",
									"    pm.response.to.have.body(\"An activity can only be created by the coach of the specified athlete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{secondaryJwtTokenCoach}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"description of activity here\",\n    \"date\": \"2020-04-10T00:00:00.000Z\",\n    \"discipline\": {\n        \"id\": 1,\n        \"name\": \"swimming\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/activities",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"activities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create an activity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0390a1f6-c11c-4b89-8913-cefb52e19ac4",
								"exec": [
									"pm.test(\"Create activity id variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"activityId\", jsonData.id);",
									"});",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{jwtToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"description of activity here\",\n    \"date\": \"2020-04-10T00:00:00.000Z\",\n    \"discipline\": {\n        \"id\": 1,\n        \"name\": \"swimming\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/activities",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"activities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get unexisting athlete activities 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f0f2a21-e6d1-456f-8bee-c0ef650849a1",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"The athlete you are trying to retrieve activities from doesn't exist in the db\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The athlete you are trying to retrieve activities from doesn't exist in the db\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes/0/activities?month=04",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"0",
								"activities"
							],
							"query": [
								{
									"key": "month",
									"value": "04"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get forbidden athlete activities 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e8867fa2-3448-4b0e-82a6-25d047bf3184",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"A collection of activities can only be retrieved by the owner athlete or its current coach\", function () {",
									"    pm.response.to.have.body(\"A collection of activities can only be retrieved by the owner athlete or its current coach\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{secondaryJwtTokenAthlete}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/activities?month=04",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"activities"
							],
							"query": [
								{
									"key": "month",
									"value": "04"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get athlete activities missing month 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ef25c966-e0fc-4e51-9f00-b5e1d15690cb",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"A specific month should be specified as query param\", function () {",
									"    pm.response.to.have.body(\"A specific month should be specified as query param\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/activities",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"activities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get athlete activities",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b4204856-b323-4c74-82c3-9a0b65328ad3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"There is a swimming activity\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].discipline.name).to.eql(\"swimming\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/activities?month=04",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"activities"
							],
							"query": [
								{
									"key": "month",
									"value": "04"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get unexisting athlete activity 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "02831780-de62-4ece-a51a-4168c8cb9374",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"The athlete you are trying to retrieve the activity from doesn't exist in the db\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The athlete you are trying to retrieve the activity from doesn't exist in the db\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes/0/activities/{{activityId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"0",
								"activities",
								"{{activityId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get athlete unexisting activity 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "37b47070-20a7-4e9e-a52c-ef4bbc22eff2",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"The activity you are trying to retrieve doesn't exist in the db\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The activity you are trying to retrieve doesn't exist in the db\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/activities/0",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"activities",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get forbidden athlete activity 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3dd90e30-7f43-4fa0-8e53-de6f8e743e9c",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"An activity can only be retrieved by the owner athlete or its current coach\", function () {",
									"    pm.response.to.have.body(\"An activity can only be retrieved by the owner athlete or its current coach\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{secondaryJwtTokenCoach}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/activities/{{activityId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"activities",
								"{{activityId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get athlete activity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "98e05927-5791-40bd-8991-7921e0fd0b76",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"There is a swimming activity\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.discipline.name).to.eql(\"swimming\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/activities/{{activityId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"activities",
								"{{activityId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update unexisting activity 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1d7ea4b6-ae62-4877-a414-16f7ac74e480",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"The activity you are trying to update doesn't exist in the db\", function () {",
									"    pm.response.to.have.body(\"The activity you are trying to update doesn't exist in the db\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"description of cycling activity here\",\n    \"date\": \"2020-04-10T00:00:00.000Z\",\n    \"discipline\": {\n        \"id\": 2,\n        \"name\": \"cycling\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/activities/0",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"activities",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update activity bad discipline 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "10feb3d6-af67-4945-a1f3-de51499bc3c7",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"discipline should not be empty\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"discipline should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"description of cycling activity here\",\n    \"date\": \"2020-04-10T00:00:00.000Z\",\n    \"discipline\": {\n        \"id\": 0,\n        \"name\": \"random-sport\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/activities/{{activityId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"activities",
								"{{activityId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update forbidden activity 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ab0b8757-f89e-4bdd-b438-2c7ce67c473d",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"An activity can only be updated by the coach of the owner athlete\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"An activity can only be updated by the coach of the owner athlete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{secondaryJwtTokenAthlete}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"description of cycling activity here\",\n    \"date\": \"2020-04-10T00:00:00.000Z\",\n    \"discipline\": {\n        \"id\": 2,\n        \"name\": \"cycling\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/activities/{{activityId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"activities",
								"{{activityId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update activity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b3536a71-512e-4405-b139-3c2cba25edc9",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"There is a swimming activity\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.discipline.name).to.eql(\"cycling\");",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"activityId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"description of cycling activity here\",\n    \"date\": \"2020-04-10T00:00:00.000Z\",\n    \"discipline\": {\n        \"id\": 2,\n        \"name\": \"cycling\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/activities/{{activityId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"activities",
								"{{activityId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete missing activity 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "df17152a-00b8-476c-bc65-fddf22868d07",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"The activity you are trying to delete doesn't exist in the db\", function () {",
									"    pm.response.to.have.body(\"The activity you are trying to delete doesn't exist in the db\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/activities/0",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"activities",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete activity wrong athlete 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ed6df56-5368-4ae0-8c6c-552460012c41",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"The athlete you are specifying and the owner of the activity are not the same\", function () {",
									"    pm.response.to.have.body(\"The athlete you are specifying and the owner of the activity are not the same\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes/0/activities/{{activityId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"0",
								"activities",
								"{{activityId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete activity forbidden athlete 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5f641c8-0b3b-4ffb-a902-c6a9052b7d82",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"An activity can only be deleted by the coach of the owner athlete\", function () {",
									"    pm.response.to.have.body(\"An activity can only be deleted by the coach of the owner athlete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{secondaryJwtTokenCoach}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/activities/{{activityId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"activities",
								"{{activityId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Auth",
			"item": [
				{
					"name": "Reset password email not specified 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0aae2b2f-d760-4283-8f66-a3b679499622",
								"exec": [
									"pm.test(\"Email must be specified\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Email must be specified\");",
									"});",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"isCoach\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/reset-password",
							"host": [
								"{{url}}"
							],
							"path": [
								"reset-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset password email not found 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d5e83e9-e6c9-4670-9631-4ae56a3ec350",
								"exec": [
									"pm.test(\"Email must be specified\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Email not found\");",
									"});",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"coach-unknown@citest.com\",\r\n\t\"isCoach\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/reset-password",
							"host": [
								"{{url}}"
							],
							"path": [
								"reset-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3fd9bebf-be0c-4ffd-9c4e-e15b7c7ed9ff",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"coach@citest.com\",\r\n\t\"isCoach\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/reset-password",
							"host": [
								"{{url}}"
							],
							"path": [
								"reset-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change password email missing 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d72dc5-0ccf-451d-b29b-67e846f0a0b4",
								"exec": [
									"pm.test(\"Email must be specified\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Both email and passwords must be specified\");",
									"});",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"password\": \"_TriTogether20_\",\r\n    \"newPassword\": \"?TriTogether2021*\",\r\n\t\"isCoach\": false,\r\n    \"isTemporary\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/change-password",
							"host": [
								"{{url}}"
							],
							"path": [
								"change-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change password, password missing 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9b644c6-da3b-43fa-a600-f116736922fd",
								"exec": [
									"pm.test(\"Password must be specified\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Both email and passwords must be specified\");",
									"});",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"athlete@citest.com\",\r\n\t\"password\": \"_TriTogether20_\",\r\n\t\"isCoach\": false,\r\n    \"isTemporary\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/change-password",
							"host": [
								"{{url}}"
							],
							"path": [
								"change-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change password, new password missing 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "07dec0d2-4b9c-490a-961f-bcbd7ff7b3b8",
								"exec": [
									"pm.test(\"New password must be specified\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Both email and passwords must be specified\");",
									"});",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"athlete@citest.com\",\r\n\t\"password\": \"_TriTogether20_\",\r\n\t\"isCoach\": false,\r\n    \"isTemporary\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/change-password",
							"host": [
								"{{url}}"
							],
							"path": [
								"change-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change password, new password non compliant 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a7375f65-9fac-42d9-a548-143547ac6bce",
								"exec": [
									"pm.test(\"Password too short\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The new password must be at least 8 characters long\");",
									"});",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"athlete@citest.com\",\r\n\t\"password\": \"_TriTogether20_\",\r\n    \"newPassword\": \"?TriTog\",\r\n\t\"isCoach\": false,\r\n    \"isTemporary\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/change-password",
							"host": [
								"{{url}}"
							],
							"path": [
								"change-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change password missing user 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "652eb43e-97ca-47ca-b784-3259f83820b1",
								"exec": [
									"pm.test(\"User not found\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"User not found\");",
									"});",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"athlete-unknown@citest.com\",\r\n\t\"password\": \"_TriTogether20_\",\r\n    \"newPassword\": \"?TriTogether2021*\",\r\n\t\"isCoach\": false,\r\n    \"isTemporary\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/change-password",
							"host": [
								"{{url}}"
							],
							"path": [
								"change-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change password, incorrect password 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "46978459-c92c-4f54-bd6e-6124fd7b4c73",
								"exec": [
									"pm.test(\"Incorrect password\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Incorrect password\");",
									"});",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"athlete@citest.com\",\r\n\t\"password\": \"wrong-password\",\r\n    \"newPassword\": \"?TriTogether2021*\",\r\n\t\"isCoach\": false,\r\n    \"isTemporary\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/change-password",
							"host": [
								"{{url}}"
							],
							"path": [
								"change-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change password, non temporary password 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "be503307-d40a-4b5e-8ab0-10fe65278a6f",
								"exec": [
									"pm.test(\"Incorrect password\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Incorrect password\");",
									"});",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"athlete@citest.com\",\r\n\t\"password\": \"_TriTogether20_\",\r\n    \"newPassword\": \"?TriTogether2021*\",\r\n\t\"isCoach\": false,\r\n    \"isTemporary\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/change-password",
							"host": [
								"{{url}}"
							],
							"path": [
								"change-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c4badc2d-5b4f-4bf2-8dd6-feb352abc5e2",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"athlete@citest.com\",\r\n\t\"password\": \"_TriTogether20_\",\r\n    \"newPassword\": \"?TriTogether2021*\",\r\n\t\"isCoach\": false,\r\n    \"isTemporary\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/change-password",
							"host": [
								"{{url}}"
							],
							"path": [
								"change-password"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Deletions",
			"item": [
				{
					"name": "Delete created activity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c52abf34-eb23-4ca3-825c-55c0add36c58",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/activities/{{activityId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"activities",
								"{{activityId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtain Athlete JWT token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e8d20605-26d3-4c3d-9828-942ccadaa49b",
								"exec": [
									"pm.test(\"Create user id variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"jwtToken\", \"Bearer \"+jsonData.access_token);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"athlete@citest.com\",\r\n\t\"password\": \"?TriTogether2021*\",\r\n\t\"isCoach\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/signin",
							"host": [
								"{{url}}"
							],
							"path": [
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete created athlete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "287bea9d-7dde-447c-b97c-27f9e4ecdd9f",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtain Coach JWT token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e7110e72-5c69-4993-9574-173bd5a4ece6",
								"exec": [
									"pm.test(\"Create user id variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"jwtToken\", \"Bearer \"+jsonData.access_token);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"coach@citest.com\",\r\n\t\"password\": \"_TriTogether20_\",\r\n\t\"isCoach\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/signin",
							"host": [
								"{{url}}"
							],
							"path": [
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete created coach",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4b5fbadc-8b93-4192-8397-995f99e42d7c",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/coaches/{{coachId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"coaches",
								"{{coachId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}