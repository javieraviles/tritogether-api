{
	"info": {
		"_postman_id": "7dd85f70-5689-4ce3-9f96-b091937c9afa",
		"name": "tritogether-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Coach",
			"item": [
				{
					"name": "Create a coach",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "57f9e1ae-940d-4d69-9ed3-3ce9c86e2bc8",
								"exec": [
									"pm.test(\"Create coach id variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"coachId\", jsonData.id);",
									"});",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Integration Test Coach\",\r\n\t\"email\": \"coach@citest.com\",\r\n\t\"password\": \"_TriTogether20_\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/coaches",
							"host": [
								"{{url}}"
							],
							"path": [
								"coaches"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a coach 400 email exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6c1b77cf-8af0-469d-8fc2-ccc2b16ff663",
								"exec": [
									"pm.test(\"Error email exists\", function () {",
									"    pm.response.to.have.body(\"The specified e-mail address already exists\");",
									"});",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Integration Test Coach\",\r\n\t\"email\": \"coach@citest.com\",\r\n\t\"password\": \"_TriTogether20_\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/coaches",
							"host": [
								"{{url}}"
							],
							"path": [
								"coaches"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a coach with wrong email 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0ab301d6-34b3-4f3a-8cc9-d79f78912b06",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Email is not valid\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"email must be an email\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Integration Test Coach\",\r\n\t\"email\": \"coach@citest\",\r\n\t\"password\": \"_TriTogether20_\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/coaches",
							"host": [
								"{{url}}"
							],
							"path": [
								"coaches"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a coach with missing name 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c215fa10-64d2-45f3-b50a-611b7d242772",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Name is missing\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"name must be longer than or equal to 5 characters\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"coach@citest.com\",\r\n\t\"password\": \"_TriTogether20_\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/coaches",
							"host": [
								"{{url}}"
							],
							"path": [
								"coaches"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a coach with invalid password 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a440c8df-d9f8-4714-9068-7352367b1f91",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Password is not valid\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The specified password must be at least 8 characters long\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Integration Test Coach\",\r\n\t\"email\": \"coach@citest.com\",\r\n\t\"password\": \"_Tri_\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/coaches",
							"host": [
								"{{url}}"
							],
							"path": [
								"coaches"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtain Coach JWT token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9c66972-5025-4f68-9442-28e425c06f6f",
								"exec": [
									"pm.test(\"Create user id variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"jwtToken\", \"Bearer \"+jsonData.access_token);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"coach@citest.com\",\r\n\t\"password\": \"_TriTogether20_\",\r\n\t\"isCoach\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/signin",
							"host": [
								"{{url}}"
							],
							"path": [
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a coach",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "142c2313-003e-4b62-ac58-aaf3e5e46c16",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Integration Test Coach\",\r\n\t\"email\": \"coach@citest.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/coaches/{{coachId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"coaches",
								"{{coachId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a coach with missing email 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d83b8a06-988f-4ec9-821a-4c4cf6373bf0",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Email is missing\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"email must be longer than or equal to 10 characters\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Integration Test Coach\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/coaches/{{coachId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"coaches",
								"{{coachId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a different coach 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e849a004-dd75-4add-bf42-29686bd74952",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"Coach can only be updated by its own user\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"A coach can only be updated by its own user\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{secondaryJwtTokenCoach}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Integration Test Coach\",\r\n\t\"email\": \"coach@citest.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/coaches/{{coachId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"coaches",
								"{{coachId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update unexisting coach 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0703af2a-92e0-4c2a-846f-ee8d8b5f089c",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"The coach you are trying to update doesn't exist in the db\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The coach you are trying to update doesn't exist in the db\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{secondaryJwtTokenCoach}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Integration Test Coach\",\r\n\t\"email\": \"coach@citest.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/coaches/0",
							"host": [
								"{{url}}"
							],
							"path": [
								"coaches",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get coach",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d122c251-3166-478e-aed3-72b1a5caf607",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Coach is created and can be fetched successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.email).to.eql(\"coach@citest.com\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/coaches/{{coachId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"coaches",
								"{{coachId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get unexisting coach 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "651f07cb-54bf-4a4a-9833-5686f37b0987",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Coach is not in the DB\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The coach you are trying to retrieve doesn't exist in the db\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/coaches/0",
							"host": [
								"{{url}}"
							],
							"path": [
								"coaches",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get coaches",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ab47807a-bbf3-41ad-93ce-dbfd1931a746",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/coaches",
							"host": [
								"{{url}}"
							],
							"path": [
								"coaches"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get coach athletes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ce72b86-41e7-4d83-8780-288ce068f540",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/coaches/{{coachId}}/athletes",
							"host": [
								"{{url}}"
							],
							"path": [
								"coaches",
								"{{coachId}}",
								"athletes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get forbidden coach athletes 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "565bf08d-18c7-404d-8c51-13d46ee97e19",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"A coach collection of athletes can only be retrieved by the coach itself\", function () {",
									"    pm.response.to.have.body(\"A coach collection of athletes can only be retrieved by the coach itself\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{secondaryJwtTokenCoach}}"
							}
						],
						"url": {
							"raw": "{{url}}/coaches/{{coachId}}/athletes",
							"host": [
								"{{url}}"
							],
							"path": [
								"coaches",
								"{{coachId}}",
								"athletes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get unexisting coach athletes 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "14718c4e-37a5-4591-8aa3-86e7022eab1f",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"The coach you are trying to retrieve athletes from doesn't exist in the db\", function () {",
									"    pm.response.to.have.body(\"The coach you are trying to retrieve athletes from doesn't exist in the db\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{secondaryJwtTokenCoach}}"
							}
						],
						"url": {
							"raw": "{{url}}/coaches/0/athletes",
							"host": [
								"{{url}}"
							],
							"path": [
								"coaches",
								"0",
								"athletes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete coach forbidden 401",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "704108f4-6e65-4bc4-a2c0-bdd628bba868",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"A coach can only be deleted by its own user\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"A coach can only be deleted by its own user\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{secondaryJwtTokenCoach}}"
							}
						],
						"url": {
							"raw": "{{url}}/coaches/{{coachId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"coaches",
								"{{coachId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete unexisting coach 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e014593f-296a-45df-9a61-fc89f59f3412",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"The coach you are trying to delete doesn't exist in the db\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The coach you are trying to delete doesn't exist in the db\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{jwtToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/coaches/0",
							"host": [
								"{{url}}"
							],
							"path": [
								"coaches",
								"0"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Athlete",
			"item": [
				{
					"name": "Create an athlete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c463023c-52b1-4c75-8e67-fa65d515ed2b",
								"exec": [
									"pm.test(\"Create athlete id variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"athleteId\", jsonData.id);",
									"});",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Default availability gets created\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.availability.monday).to.eql(true);",
									"});",
									"pm.test(\"Create availability id variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"availabilityId\", jsonData.availability.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Integration Test Athlete\",\r\n\t\"email\": \"athlete@citest.com\",\r\n\t\"password\": \"_TriTogether20_\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create an athlete 400 email exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "086a3266-d1ac-4836-98cc-5e1395c86e88",
								"exec": [
									"pm.test(\"Error email exists\", function () {",
									"    pm.response.to.have.body(\"The specified e-mail address already exists\");",
									"});",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Integration Test Athlete\",\r\n\t\"email\": \"athlete@citest.com\",\r\n\t\"password\": \"_TriTogether20_\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create an athlete with wrong email 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a149827b-d535-4fe2-b5c4-38ade91ed03d",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Email is not valid\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"email must be an email\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Integration Test Athlete\",\r\n\t\"email\": \"athlete@citest\",\r\n\t\"password\": \"_TriTogether20_\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create an athlete with missing name 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a6b0310c-5f2f-45b6-802c-338d8ecb98cf",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Name is missing\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"name must be longer than or equal to 5 characters\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"athlete@citest.com\",\r\n\t\"password\": \"_TriTogether20_\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a coach with invalid password 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "72a7262b-275f-413d-926e-565d3e7ea89e",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Password is not valid\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The specified password must be at least 8 characters long\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Integration Test Athlete\",\r\n\t\"email\": \"athlete@citest.com\",\r\n\t\"password\": \"_Tri_\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtain Athlete JWT token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb5c0ed7-b5c2-4803-9a7e-cb9e005cade5",
								"exec": [
									"pm.test(\"Create user id variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"jwtToken\", \"Bearer \"+jsonData.access_token);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"athlete@citest.com\",\r\n\t\"password\": \"_TriTogether20_\",\r\n\t\"isCoach\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/signin",
							"host": [
								"{{url}}"
							],
							"path": [
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an athlete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "480dfbe3-28dd-447f-beda-5b3faac29e92",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Integration Test Athlete\",\r\n\t\"email\": \"athlete@citest.com\",\r\n\t\"availability\": {\r\n\t\t\"id\": {{availabilityId}},\r\n        \"monday\": true,\r\n        \"tuesday\": true,\r\n        \"wednesday\": false,\r\n        \"thursday\": false,\r\n        \"friday\": true,\r\n        \"saturday\": true,\r\n        \"sunday\": true\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an athlete with missing email 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b4c36ec-a73b-4580-b5dd-5cde73a8102b",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Email is missing\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"email must be longer than or equal to 10 characters\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Integration Test Athlete\",\r\n\t\"availability\": {\r\n\t\t\"id\": {{availabilityId}},\r\n        \"monday\": true,\r\n        \"tuesday\": true,\r\n        \"wednesday\": false,\r\n        \"thursday\": false,\r\n        \"friday\": true,\r\n        \"saturday\": true,\r\n        \"sunday\": true\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a different athlete 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a11224cd-bfaf-48c4-a5e0-a0ee6fad0742",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"An athlete can only be updated by its own user\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"An athlete can only be updated by its own user\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{secondaryJwtTokenAthlete}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Integration Test Athlete\",\r\n\t\"email\": \"athlete@citest.com\",\r\n\t\"availability\": {\r\n\t\t\"id\": {{availabilityId}},\r\n        \"monday\": true,\r\n        \"tuesday\": true,\r\n        \"wednesday\": false,\r\n        \"thursday\": false,\r\n        \"friday\": true,\r\n        \"saturday\": true,\r\n        \"sunday\": true\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update unexisting athlete 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ab6c528c-78e0-4251-bfed-0a6b8f6526ba",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"The athlete you are trying to update doesn't exist in the db\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The athlete you are trying to update doesn't exist in the db\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{secondaryJwtTokenAthlete}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Integration Test Athlete\",\r\n\t\"email\": \"athlete@citest.com\",\r\n\t\"availability\": {\r\n\t\t\"id\": {{availabilityId}},\r\n        \"monday\": true,\r\n        \"tuesday\": true,\r\n        \"wednesday\": false,\r\n        \"thursday\": false,\r\n        \"friday\": true,\r\n        \"saturday\": true,\r\n        \"sunday\": true\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/0",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get athlete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "565fa9e4-c6a7-4f06-8906-b6d34524c60a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Athlete is created and can be fetched successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.email).to.eql(\"athlete@citest.com\");",
									"});",
									"",
									"pm.test(\"Availability gets fetched too\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.availability.wednesday).to.eql(false);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get unexisting athlete 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "398395c0-28eb-4b6f-91b3-e29c8dcae383",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Athlete is not in the DB\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The athlete you are trying to retrieve doesn't exist in the db\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes/0",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get forbidden athlete 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "803496f7-e9a0-422a-a1ed-f4113d2fe866",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Athlete has to be retrieved by itself or coach\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Athlete information can only be retrieved by the owner athlete or its current coach\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{secondaryJwtTokenAthlete}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get athletes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "67019ab9-4f8e-445c-9a24-b957c11b0bf9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update coach of an unexisting athlete 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "16d51f63-9f84-419b-aceb-f024055952f2",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"The athlete/coach you are trying to update doesn't exist in the db\", function () {",
									"    pm.response.to.have.body(\"The athlete/coach you are trying to update doesn't exist in the db\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"id\": {{coachId}},\r\n    \"name\": \"Integration Test Coach\",\r\n\t\"email\": \"coach@citest.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/0/coach",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"0",
								"coach"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update unexisting coach of an athlete 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5533047d-ce3a-44da-b412-7bb9f0d24c00",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"The athlete/coach you are trying to update doesn't exist in the db\", function () {",
									"    pm.response.to.have.body(\"The athlete/coach you are trying to update doesn't exist in the db\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Integration Test Coach\",\r\n\t\"email\": \"coach@citest.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/coach",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"coach"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtain Coach JWT token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "816324a4-1570-4317-b5bd-e5c9a6834cdb",
								"exec": [
									"pm.test(\"Create user id variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"jwtToken\", \"Bearer \"+jsonData.access_token);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"coach@citest.com\",\r\n\t\"password\": \"_TriTogether20_\",\r\n\t\"isCoach\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/signin",
							"host": [
								"{{url}}"
							],
							"path": [
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update coach of an athlete must be coach 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c6ae5b04-00db-486a-b184-ef5461999c8f",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"Athlete's coach must be the one performing the request\", function () {",
									"    pm.response.to.have.body(\"Athlete's coach must be the one performing the request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{secondaryJwtTokenCoach}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"id\": {{coachId}},\r\n    \"name\": \"Integration Test Coach\",\r\n\t\"email\": \"coach@citest.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/coach",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"coach"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update coach of an athlete must exist PENDING notification 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3aec7bf7-180a-4b7b-9309-f8aaf3ada9ed",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"There is no PENDING coaching notification between specified athlete and coach\", function () {",
									"    pm.response.to.have.body(\"There is no PENDING coaching notification between specified athlete and coach\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"id\": {{coachId}},\r\n    \"name\": \"Integration Test Coach\",\r\n\t\"email\": \"coach@citest.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/coach",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"coach"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtain Athlete JWT token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1e41595d-d989-43b6-b353-38cfc2c06d91",
								"exec": [
									"pm.test(\"Create user id variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"jwtToken\", \"Bearer \"+jsonData.access_token);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"athlete@citest.com\",\r\n\t\"password\": \"_TriTogether20_\",\r\n\t\"isCoach\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/signin",
							"host": [
								"{{url}}"
							],
							"path": [
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create pending notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7fe275ac-f90c-4283-9716-c4eba12972c1",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"New notification status is PENDING\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"PENDING\");",
									"});",
									"",
									"pm.test(\"Create notification id variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"notificationId\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"athlete\": {\r\n\t\t\"id\": {{athleteId}},\r\n    \t\"name\": \"Integration Test Athlete\",\r\n\t\t\"email\": \"athlete@citest.com\"\t\r\n\t},\r\n\t\"coach\": {\r\n\t\t\"id\": {{coachId}},\r\n    \t\"name\": \"Integration Test Coach\",\r\n\t\t\"email\": \"coach@citest.com\"\r\n\t}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/notifications",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtain Coach JWT token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5a07f6df-edc3-4437-a761-8bb4e4e0a738",
								"exec": [
									"pm.test(\"Create user id variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"jwtToken\", \"Bearer \"+jsonData.access_token);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"coach@citest.com\",\r\n\t\"password\": \"_TriTogether20_\",\r\n\t\"isCoach\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/signin",
							"host": [
								"{{url}}"
							],
							"path": [
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update coach of an athlete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "61a79cfc-c2ec-4b0d-a177-9dfee5baa8a0",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Athlete should be updated with a coach\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"athleteId\"));",
									"    pm.expect(jsonData.coach).to.not.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"id\": {{coachId}},\r\n    \"name\": \"Integration Test Coach\",\r\n\t\"email\": \"coach@citest.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/coach",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"coach"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update coach of an athlete, there is a coach already 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "386ef3e8-8fa7-4e56-8da3-34fe16155098",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"There is a coach assigned to the athlete already\", function () {",
									"    pm.response.to.have.body(\"There is a coach assigned to the athlete already\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"id\": {{coachId}},\r\n    \"name\": \"Integration Test Coach\",\r\n\t\"email\": \"coach@citest.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/coach",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"coach"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update forbidden coach of an athlete 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9bcb83eb-19bc-44d0-9f99-e9c732729add",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"Athlete's coach must be the one performing the request\", function () {",
									"    pm.response.to.have.body(\"Athlete's coach must be the one performing the request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{secondaryJwtTokenCoach}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"id\": {{coachId}},\r\n    \"name\": \"Integration Test Coach\",\r\n\t\"email\": \"coach@citest.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/coach",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"coach"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get athlete from coach",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4de199e7-680f-4cf3-af07-a83ab96ec0b7",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Athlete can be fetched successfully from coach too\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.email).to.eql(\"athlete@citest.com\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtain Coach JWT token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "470b3bce-8080-4658-94d5-b0e8d12f1993",
								"exec": [
									"pm.test(\"Create user id variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"jwtToken\", \"Bearer \"+jsonData.access_token);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"coach@citest.com\",\r\n\t\"password\": \"_TriTogether20_\",\r\n\t\"isCoach\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/signin",
							"host": [
								"{{url}}"
							],
							"path": [
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove coach of an athlete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "68a0a934-6cd4-44f6-a78f-860f6dcd3a35",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Coach should be successfully removed\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.coach).to.eql(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Integration Test Coach\",\r\n\t\"email\": \"coach@citest.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/coach",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"coach"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update coach of an athlete again",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b31d22fd-6b42-4a68-9702-f3d58eeba9fa",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Athlete should be updated with a coach\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"athleteId\"));",
									"    pm.expect(jsonData.coach).to.not.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"id\": {{coachId}},\r\n    \"name\": \"Integration Test Coach\",\r\n\t\"email\": \"coach@citest.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/coach",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"coach"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtain Athlete JWT token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c621d00f-fafc-4fed-a1fa-c2628df89210",
								"exec": [
									"pm.test(\"Create user id variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"jwtToken\", \"Bearer \"+jsonData.access_token);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"athlete@citest.com\",\r\n\t\"password\": \"_TriTogether20_\",\r\n\t\"isCoach\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/signin",
							"host": [
								"{{url}}"
							],
							"path": [
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete athlete forbidden 401",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d19f5470-c7e3-4333-9c6c-5bf6e3c8bc72",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"An athlete can only be deleted by its own user\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"An athlete can only be deleted by its own user\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{secondaryJwtTokenAthlete}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete unexisting athlete 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "de698c6d-562d-4ace-b5a5-1d9a09b23eb9",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"The athlete you are trying to delete doesn't exist in the db\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The athlete you are trying to delete doesn't exist in the db\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes/0",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"0"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Notification",
			"item": [
				{
					"name": "Get unexisting athlete notifications 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4a917a24-a1fe-484a-a254-b07aabf985d0",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"The athlete you are trying to retrieve notifications from doesn't exist in the db\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The athlete you are trying to retrieve notifications from doesn't exist in the db\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes/0/notifications",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"0",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get forbidden athlete notifications 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c2307178-5b18-4379-8065-c1f4d600c100",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"Notifications can only be retrieved by the owner athlete\", function () {",
									"    pm.response.to.have.body(\"Notifications can only be retrieved by the owner athlete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{secondaryJwtTokenAthlete}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/notifications",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get athlete notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1d2d87b5-14a7-4ac5-88fd-24df240143cc",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"There is a PENDING notification\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].status).to.eql(\"PENDING\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/notifications",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtain Coach JWT token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd1a03b7-a5f5-46a9-b97b-e635f97e3eff",
								"exec": [
									"pm.test(\"Create user id variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"jwtToken\", \"Bearer \"+jsonData.access_token);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"coach@citest.com\",\r\n\t\"password\": \"_TriTogether20_\",\r\n\t\"isCoach\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/signin",
							"host": [
								"{{url}}"
							],
							"path": [
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get unexisting coach notifications 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b0dab5fc-7533-4e1e-8733-dc92f6c17094",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"The coach you are trying to retrieve notifications from doesn't exist in the db\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The coach you are trying to retrieve notifications from doesn't exist in the db\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/coaches/0/notifications",
							"host": [
								"{{url}}"
							],
							"path": [
								"coaches",
								"0",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get forbidden coach notifications 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "abcee63b-7760-47a7-ba1a-e8f1b0c1d2ea",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"Notifications can only be retrieved by the owner coach\", function () {",
									"    pm.response.to.have.body(\"Notifications can only be retrieved by the owner coach\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{secondaryJwtTokenCoach}}"
							}
						],
						"url": {
							"raw": "{{url}}/coaches/{{coachId}}/notifications",
							"host": [
								"{{url}}"
							],
							"path": [
								"coaches",
								"{{coachId}}",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get coach notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9b975cc8-f1a2-4ff8-b8cb-72b2153dca9b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].status).to.eql(\"PENDING\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/coaches/{{coachId}}/notifications",
							"host": [
								"{{url}}"
							],
							"path": [
								"coaches",
								"{{coachId}}",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create pending notification forbidden athlete 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e64fb04-2625-4529-a07c-8342acd29c5f",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"A notification can only be created by the specified athlete\", function () {",
									"    pm.response.to.have.body(\"A notification can only be created by the specified athlete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"athlete\": {\r\n\t\t\"id\": {{athleteId}},\r\n    \t\"name\": \"Integration Test Athlete\",\r\n\t\t\"email\": \"athlete@citest.com\"\t\r\n\t},\r\n\t\"coach\": {\r\n\t\t\"id\": {{coachId}},\r\n    \t\"name\": \"Integration Test Coach\",\r\n\t\t\"email\": \"coach@citest.com\"\r\n\t}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/notifications",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtain Athlete JWT token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "31571268-2a13-4bb2-a2c7-836dbb8e0e6e",
								"exec": [
									"pm.test(\"Create user id variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"jwtToken\", \"Bearer \"+jsonData.access_token);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"athlete@citest.com\",\r\n\t\"password\": \"_TriTogether20_\",\r\n\t\"isCoach\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/signin",
							"host": [
								"{{url}}"
							],
							"path": [
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create pending notification unexisting athlete 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "297a8347-3e48-40e6-aa08-751e9a904ace",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"The athlete/coach you are trying to create notifications for doesn't exist in the db\", function () {",
									"    pm.response.to.have.body(\"The athlete/coach you are trying to create notifications for doesn't exist in the db\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"athlete\": {\r\n\t\t\"id\": {{athleteId}},\r\n    \t\"name\": \"Integration Test Athlete\",\r\n\t\t\"email\": \"athlete@citest.com\"\t\r\n\t},\r\n\t\"coach\": {\r\n\t\t\"id\": {{coachId}},\r\n    \t\"name\": \"Integration Test Coach\",\r\n\t\t\"email\": \"coach@citest.com\"\r\n\t}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/0/notifications",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"0",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create pending notification unexisting coach 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a52dce50-8b64-49f9-96e5-c4b17c27dd2c",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"The athlete/coach you are trying to create notifications for doesn't exist in the db\", function () {",
									"    pm.response.to.have.body(\"The athlete/coach you are trying to create notifications for doesn't exist in the db\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"athlete\": {\r\n\t\t\"id\": {{athleteId}},\r\n    \t\"name\": \"Integration Test Athlete\",\r\n\t\t\"email\": \"athlete@citest.com\"\t\r\n\t},\r\n\t\"coach\": {\r\n\t\t\"id\": 0,\r\n    \t\"name\": \"Integration Test Coach\",\r\n\t\t\"email\": \"coach@citest.com\"\r\n\t}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/notifications",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update unexisting notification 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18871bf7-5592-4c2d-814b-4d58d58567fe",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"The notification you are trying to update doesn't exist in the db\", function () {",
									"    pm.response.to.have.body(\"The notification you are trying to update doesn't exist in the db\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"status\": \"APPROVED\",\r\n\t\"athlete\": {\r\n\t\t\"id\": {{athleteId}},\r\n    \t\"name\": \"Integration Test Athlete\",\r\n\t\t\"email\": \"athlete@citest.com\"\t\r\n\t},\r\n\t\"coach\": {\r\n\t\t\"id\": {{coachId}},\r\n    \t\"name\": \"Integration Test Coach\",\r\n\t\t\"email\": \"coach@citest.com\"\r\n\t}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/notifications/0",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"notifications",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update notification bad status 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c8586773-69ec-462d-a75b-e3d08780b27e",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Name is missing\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"status should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"status\": \"NOT-POSSIBLE-STATUS\",\r\n\t\"athlete\": {\r\n\t\t\"id\": {{athleteId}},\r\n    \t\"name\": \"Integration Test Athlete\",\r\n\t\t\"email\": \"athlete@citest.com\"\t\r\n\t},\r\n\t\"coach\": {\r\n\t\t\"id\": {{coachId}},\r\n    \t\"name\": \"Integration Test Coach\",\r\n\t\t\"email\": \"coach@citest.com\"\r\n\t}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/notifications/{{notificationId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"notifications",
								"{{notificationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update notification bad ids 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cadebf48-7493-4a09-9443-afe8ed2a7f65",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"The specified athlete/coach is not the same as the original athlete/coach in the notification\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The specified athlete/coach is not the same as the original athlete/coach in the notification\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"status\": \"APPROVED\",\r\n\t\"athlete\": {\r\n\t\t\"id\": {{athleteId}},\r\n    \t\"name\": \"Integration Test Athlete\",\r\n\t\t\"email\": \"athlete@citest.com\"\t\r\n\t},\r\n\t\"coach\": {\r\n\t\t\"id\": 0,\r\n    \t\"name\": \"Integration Test Coach\",\r\n\t\t\"email\": \"coach@citest.com\"\r\n\t}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/notifications/{{notificationId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"notifications",
								"{{notificationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update forbidden pending notification 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9168323e-9711-491b-9c6e-7734616bbb2e",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"A notification can only be updated by the owner athlete or the coach implied\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"A notification can only be updated by the owner athlete or the coach implied\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{secondaryJwtTokenAthlete}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"status\": \"APPROVED\",\r\n\t\"athlete\": {\r\n\t\t\"id\": {{athleteId}},\r\n    \t\"name\": \"Integration Test Athlete\",\r\n\t\t\"email\": \"athlete@citest.com\"\t\r\n\t},\r\n\t\"coach\": {\r\n\t\t\"id\": {{coachId}},\r\n    \t\"name\": \"Integration Test Coach\",\r\n\t\t\"email\": \"coach@citest.com\"\r\n\t}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/notifications/{{notificationId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"notifications",
								"{{notificationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update pending notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "402ac94f-ed5f-4885-92d2-822474a96177",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"New notification status is APPROVED\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"APPROVED\");",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"notificationId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"status\": \"APPROVED\",\r\n\t\"athlete\": {\r\n\t\t\"id\": {{athleteId}},\r\n    \t\"name\": \"Integration Test Athlete\",\r\n\t\t\"email\": \"athlete@citest.com\"\t\r\n\t},\r\n\t\"coach\": {\r\n\t\t\"id\": {{coachId}},\r\n    \t\"name\": \"Integration Test Coach\",\r\n\t\t\"email\": \"coach@citest.com\"\r\n\t}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/notifications/{{notificationId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"notifications",
								"{{notificationId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Activity",
			"item": [
				{
					"name": "Obtain Coach JWT token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bb9d9cb5-c43e-4e59-87f8-d637dadf7d3f",
								"exec": [
									"pm.test(\"Create user id variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"jwtToken\", \"Bearer \"+jsonData.access_token);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"coach@citest.com\",\r\n\t\"password\": \"_TriTogether20_\",\r\n\t\"isCoach\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/signin",
							"host": [
								"{{url}}"
							],
							"path": [
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create an activity missing description 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "640ba727-1ae8-432b-a682-dcc9ca28e148",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"description must be longer than or equal to 10 characters\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"description must be longer than or equal to 10 characters\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"date\": \"2020-04-10T00:00:00.000Z\",\n    \"discipline\": {\n        \"id\": 1,\n        \"name\": \"swimming\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/activities",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"activities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create an activity unexisting athlete 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2e67b356-ec25-4335-8099-1eb4a8d0a67a",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"The athlete you are trying to create activities for doesn't exist in the db\", function () {",
									"    pm.response.to.have.body(\"The athlete you are trying to create activities for doesn't exist in the db\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"description of activity here\",\n    \"date\": \"2020-04-10T00:00:00.000Z\",\n    \"discipline\": {\n        \"id\": 1,\n        \"name\": \"swimming\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/0/activities",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"0",
								"activities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create an activity forbidden coach 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9845c38-7c80-42b8-900c-904847632c9c",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"An activity can only be created by the coach of the specified athlete\", function () {",
									"    pm.response.to.have.body(\"An activity can only be created by the coach of the specified athlete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{secondaryJwtTokenCoach}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"description of activity here\",\n    \"date\": \"2020-04-10T00:00:00.000Z\",\n    \"discipline\": {\n        \"id\": 1,\n        \"name\": \"swimming\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/activities",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"activities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create an activity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d057a326-0d9d-437d-814c-a026d49b07b3",
								"exec": [
									"pm.test(\"Create activity id variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"activityId\", jsonData.id);",
									"});",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{jwtToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"description of activity here\",\n    \"date\": \"2020-04-10T00:00:00.000Z\",\n    \"discipline\": {\n        \"id\": 1,\n        \"name\": \"swimming\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/activities",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"activities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get unexisting athlete activities 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "011a6d3c-1b08-4e49-9ee1-db5d38056ea8",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"The athlete you are trying to retrieve activities from doesn't exist in the db\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The athlete you are trying to retrieve activities from doesn't exist in the db\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes/0/activities?month=04",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"0",
								"activities"
							],
							"query": [
								{
									"key": "month",
									"value": "04"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get forbidden athlete activities 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f6dfe8f9-702e-4d80-b901-0f3e31227c1d",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"A collection of activities can only be retrieved by the owner athlete or its current coach\", function () {",
									"    pm.response.to.have.body(\"A collection of activities can only be retrieved by the owner athlete or its current coach\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{secondaryJwtTokenAthlete}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/activities?month=04",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"activities"
							],
							"query": [
								{
									"key": "month",
									"value": "04"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get athlete activities missing month 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7aa4eada-3652-46da-9051-8f4fdacddf82",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"A specific month should be specified as query param\", function () {",
									"    pm.response.to.have.body(\"A specific month should be specified as query param\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/activities",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"activities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get athlete activities",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4d6157b4-691d-41e6-86aa-d14602b853c1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"There is a swimming activity\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].discipline.name).to.eql(\"swimming\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/activities?month=04",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"activities"
							],
							"query": [
								{
									"key": "month",
									"value": "04"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get unexisting athlete activity 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e07746f7-907b-45b3-808e-7baf3142ce5a",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"The athlete you are trying to retrieve the activity from doesn't exist in the db\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The athlete you are trying to retrieve the activity from doesn't exist in the db\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes/0/activities/{{activityId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"0",
								"activities",
								"{{activityId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get athlete unexisting activity 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0913b96c-dd7f-4522-86e9-36438c5724f9",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"The activity you are trying to retrieve doesn't exist in the db\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The activity you are trying to retrieve doesn't exist in the db\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/activities/0",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"activities",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get forbidden athlete activity 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1f199b3-0ab3-48da-8cfe-58823f46ff46",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"An activity can only be retrieved by the owner athlete or its current coach\", function () {",
									"    pm.response.to.have.body(\"An activity can only be retrieved by the owner athlete or its current coach\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{secondaryJwtTokenCoach}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/activities/{{activityId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"activities",
								"{{activityId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get athlete activity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8a622d6f-ebf1-405f-8988-f564854434fe",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"There is a swimming activity\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.discipline.name).to.eql(\"swimming\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/activities/{{activityId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"activities",
								"{{activityId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update unexisting activity 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "13db7c6d-ed39-4602-a6b5-e0c99c8ec4fa",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"The activity you are trying to update doesn't exist in the db\", function () {",
									"    pm.response.to.have.body(\"The activity you are trying to update doesn't exist in the db\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"description of cycling activity here\",\n    \"date\": \"2020-04-10T00:00:00.000Z\",\n    \"discipline\": {\n        \"id\": 2,\n        \"name\": \"cycling\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/activities/0",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"activities",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update activity bad discipline 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6c2d480b-dcd8-4a61-817e-760d24305ce9",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"discipline should not be empty\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"discipline should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"description of cycling activity here\",\n    \"date\": \"2020-04-10T00:00:00.000Z\",\n    \"discipline\": {\n        \"id\": 0,\n        \"name\": \"random-sport\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/activities/{{activityId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"activities",
								"{{activityId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update forbidden activity 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "be40278a-33bc-4a33-9802-a1d372d9f9b5",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"An activity can only be updated by the coach of the owner athlete\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"An activity can only be updated by the coach of the owner athlete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{secondaryJwtTokenAthlete}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"description of cycling activity here\",\n    \"date\": \"2020-04-10T00:00:00.000Z\",\n    \"discipline\": {\n        \"id\": 2,\n        \"name\": \"cycling\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/activities/{{activityId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"activities",
								"{{activityId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update activity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3b31fa53-f99e-4688-a21d-ace598877c9b",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"There is a swimming activity\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.discipline.name).to.eql(\"cycling\");",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"activityId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"description of cycling activity here\",\n    \"date\": \"2020-04-10T00:00:00.000Z\",\n    \"discipline\": {\n        \"id\": 2,\n        \"name\": \"cycling\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/activities/{{activityId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"activities",
								"{{activityId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete missing activity 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c96d778e-70aa-432b-897b-989914459a65",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"The activity you are trying to delete doesn't exist in the db\", function () {",
									"    pm.response.to.have.body(\"The activity you are trying to delete doesn't exist in the db\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/activities/0",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"activities",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete activity wrong athlete 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18366df8-19ba-4bcf-acf8-2870fe119c04",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"The athlete you are specifying and the owner of the activity are not the same\", function () {",
									"    pm.response.to.have.body(\"The athlete you are specifying and the owner of the activity are not the same\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes/0/activities/{{activityId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"0",
								"activities",
								"{{activityId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete activity forbidden athlete 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c9264b54-13be-4eed-a581-abaae4eaf944",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"An activity can only be deleted by the coach of the owner athlete\", function () {",
									"    pm.response.to.have.body(\"An activity can only be deleted by the coach of the owner athlete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{secondaryJwtTokenCoach}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/activities/{{activityId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"activities",
								"{{activityId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Deletions",
			"item": [
				{
					"name": "Delete created activity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "76b45477-1efa-4e2e-b564-e40ebc0bc648",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}/activities/{{activityId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}",
								"activities",
								"{{activityId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtain Athlete JWT token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "819c5334-ec54-40d5-a56c-3b8b3fea617d",
								"exec": [
									"pm.test(\"Create user id variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"jwtToken\", \"Bearer \"+jsonData.access_token);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"athlete@citest.com\",\r\n\t\"password\": \"_TriTogether20_\",\r\n\t\"isCoach\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/signin",
							"host": [
								"{{url}}"
							],
							"path": [
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete created athlete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "11fd1161-a068-4fa4-bef8-254f5fe7a340",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/athletes/{{athleteId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"athletes",
								"{{athleteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtain Coach JWT token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c694e0ec-380f-434b-b24c-7dc6f018b8a8",
								"exec": [
									"pm.test(\"Create user id variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"jwtToken\", \"Bearer \"+jsonData.access_token);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"coach@citest.com\",\r\n\t\"password\": \"_TriTogether20_\",\r\n\t\"isCoach\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/signin",
							"host": [
								"{{url}}"
							],
							"path": [
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete created coach",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7880d0f7-e620-45a8-ae3e-2da90158794c",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/coaches/{{coachId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"coaches",
								"{{coachId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}